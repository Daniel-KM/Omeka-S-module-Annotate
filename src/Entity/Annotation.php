<?php declare(strict_types=1);
namespace Annotate\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Event\LifecycleEventArgs;

/**
 * @Entity
 * @HasLifecycleCallbacks
 */
class Annotation extends AnnotationPart
{
    /**
     * This property simplifies the search inside all the annotation parts. It
     * is a copy of the id itself.
     * Because it's autogenerated by the database, it should be nullable in
     * order to be filled in a post persist request. This is needed only during
     * creation, since it will never change.
     * @todo Find a way to keep Annotation parent non-nullable and to avoid a post-persist event.
     *
     * @OneToOne(
     *     targetEntity="Annotation",
     *     mappedBy="annotation",
     *     cascade={"persist"}
     * )
     * @JoinColumn(
     *     name="annotation_id",
     *     referencedColumnName="id",
     *     nullable=true
     * )
     */
    protected $annotation;

    protected $part = \Annotate\Entity\Annotation::class;

    /**
     * @var AnnotationTarget[]
     * @OneToMany(
     *     targetEntity="AnnotationTarget",
     *     mappedBy="annotation",
     *     orphanRemoval=true,
     *     cascade={"persist", "remove", "detach"},
     *     indexBy="id"
     * )
     * @OrderBy({"id" = "ASC"})
     */
    protected $targets;

    /**
     * @var AnnotationBody[]
     * @OneToMany(
     *     targetEntity="AnnotationBody",
     *     mappedBy="annotation",
     *     orphanRemoval=true,
     *     cascade={"persist", "remove", "detach"},
     *     indexBy="id"
     * )
     * @OrderBy({"id" = "ASC"})
     */
    protected $bodies;

    public function __construct()
    {
        parent::__construct();
        $this->annotation = $this;
        $this->targets = new ArrayCollection;
        $this->bodies = new ArrayCollection;
    }

    public function getResourceName()
    {
        return 'annotations';
    }

    /**
     * @return \Annotate\Entity\AnnotationTarget[]
     */
    public function getTargets()
    {
        return $this->targets;
    }

    /**
     * @return \Annotate\Entity\AnnotationBody[]
     */
    public function getBodies()
    {
        return $this->bodies;
    }

    public function setAnnotation(Annotation $annotation): void
    {
        // Don't set annotation: it must be the current one.
    }

    /**
     * @return self
     */
    public function getAnnotation()
    {
        return $this;
    }

    /**
     * @PostPersist
     */
    public function postPersist(LifecycleEventArgs $eventArgs): void
    {
        // Nothing to do, since $this->annotation is already $this.
        // The post persist just needs to be triggered, so the auto-generated id
        // is filled in this column too.
        // $this->annotation = $eventArgs->getEntity();
    }
}
